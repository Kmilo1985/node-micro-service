Microservicios con Node.js, Sequelize y Angular
Este proyecto consta de:

auth-service: Servicio para autenticaciÃ³n y manejo de usuarios.
task-service: Servicio para gestiÃ³n de tareas.
frontend: AplicaciÃ³n Angular para interactuar con ambos microservicios.

/project-root
â”‚
â”œâ”€â”€ auth-service (Puerto 3000)
â”‚   â”œâ”€â”€ index.js
â”‚   â”œâ”€â”€ .env
â”‚   â”œâ”€â”€ package.json
â”‚   â””â”€â”€ /src
â”‚
â”œâ”€â”€ task-service (Puerto 4000)
â”‚   â”œâ”€â”€ index.js
â”‚   â”œâ”€â”€ .env
â”‚   â”œâ”€â”€ package.json
â”‚   â””â”€â”€ /src
â”‚
â”œâ”€â”€ frontend (Puerto 5004 - Angular)
â”‚   â”œâ”€â”€ src
â”‚   â”œâ”€â”€ proxy.conf.json
â”‚   â”œâ”€â”€ package.json
â”‚   â””â”€â”€ angular.json
â””â”€â”€ README.md


ðŸ”§ ConfiguraciÃ³n de los Microservicios (Backend)
ðŸ“‚ auth-service (Servicio de autenticaciÃ³n)
DirÃ­gete al directorio del servicio:
bash
Copiar
Editar
cd auth-service
Instala las dependencias:
bash
Copiar
Editar
npm install
Configura tu archivo .env:
env
Copiar
Editar
PORT=3000
DB_USER=tu_usuario
DB_PASSWORD=tu_contraseÃ±a
DB_NAME=nombre_base_datos
DB_HOST=localhost
JWT_SECRET=tu_secreto
Inicia el servicio:
bash
Copiar
Editar
npm run dev
El servicio estarÃ¡ disponible en http://localhost:3000/.

ðŸ“‚ task-service (Servicio de gestiÃ³n de tareas)
DirÃ­gete al directorio del servicio:
bash
Copiar
Editar
cd task-service
Instala las dependencias:
bash
Copiar
Editar
npm install
Configura tu archivo .env:
env
Copiar
Editar
PORT=4000
DB_USER=tu_usuario
DB_PASSWORD=tu_contraseÃ±a
DB_NAME=nombre_base_datos
DB_HOST=localhost
JWT_SECRET=tu_secreto
Inicia el servicio:
bash
Copiar
Editar
npm run dev
El servicio estarÃ¡ disponible en http://localhost:4000/.

ðŸŒŸ ConfiguraciÃ³n del Frontend (Angular)
ðŸ“‚ frontend (Angular Application)
DirÃ­gete al directorio del frontend:
bash
Copiar
Editar
cd frontend
Instala las dependencias:
bash
Copiar
Editar
npm install
Configura tu archivo proxy.conf.json:
json
Copiar
Editar
{
  "/api/user": {
    "target": "http://localhost:3000",
    "secure": false,
    "changeOrigin": true,
    "logLevel": "debug"
  },
  "/api/tasks": {
    "target": "http://localhost:4000",
    "secure": false,
    "changeOrigin": true,
    "logLevel": "debug"
  }
}
Inicia la aplicaciÃ³n Angular con el proxy:
bash
Copiar
Editar
ng serve --proxy-config proxy.conf.json
El frontend estarÃ¡ disponible en http://localhost:5004/.

ðŸ“Œ CÃ³mo Probar el Proyecto (Postman o Angular)
ðŸ”’ Rutas del auth-service (http://localhost:3000/)
Login: POST /api/user
json
Copiar
Editar
{
  "nombre_usuario": "tu_usuario",
  "contrasena": "tu_contraseÃ±a"
}
Registro (si aplica): POST /api/user/register
ðŸ“Œ Rutas del task-service (http://localhost:4000/)
Crear tarea: POST /api/tasks (Requiere Token en Headers)
Obtener tareas: GET /api/tasks (Requiere Token en Headers)
Eliminar tarea: DELETE /api/tasks/:id (Requiere Token en Headers)
ðŸ”‘ AutenticaciÃ³n con Token
Cuando hagas login desde Angular o Postman, se debe enviar el token recibido en cada solicitud al task-service en los headers:

http
Copiar
Editar
Authorization: Bearer <tu_token